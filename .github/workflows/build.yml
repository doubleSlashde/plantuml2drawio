name: Build Executables

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Update version numbers
        shell: python
        run: |
          import re
          import os
          from datetime import datetime

          # Get version from git tag
          version = os.environ['GITHUB_REF'].split('/')[-1].replace('v', '')

          # Update version in files
          files_to_update = [
              'src/plantuml2drawio/app.py',
              'src/plantuml2drawio/config.py',
              'src/plantuml2drawio/__init__.py',
              'setup.py'
          ]

          for file_path in files_to_update:
              with open(file_path, 'r', encoding='utf-8') as f:
                  content = f.read()

              # Update version strings
              content = re.sub(r'VERSION = "[^"]*"', f'VERSION = "{version}"', content)
              content = re.sub(r'__version__ = "[^"]*"', f'__version__ = "{version}"', content)
              content = re.sub(r'version="[^"]*"', f'version="{version}"', content)

              # Update version date in config.py
              if 'config.py' in file_path:
                  today = datetime.now().strftime('%Y-%m-%d')
                  content = re.sub(r'VERSION_DATE = "[^"]*"', f'VERSION_DATE = "{today}"', content)

              with open(file_path, 'w', encoding='utf-8') as f:
                  f.write(content)

      - name: Build Windows executable
        run: python -m PyInstaller --clean p2d.spec

      - name: Debug - List dist directory
        shell: cmd
        run: |
          dir dist /s

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: p2d-windows
          path: dist/p2d/**/*

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Update version numbers
        shell: python
        run: |
          import re
          import os
          from datetime import datetime

          # Get version from git tag
          version = os.environ['GITHUB_REF'].split('/')[-1].replace('v', '')

          # Update version in files
          files_to_update = [
              'src/plantuml2drawio/app.py',
              'src/plantuml2drawio/config.py',
              'src/plantuml2drawio/__init__.py',
              'setup.py'
          ]

          for file_path in files_to_update:
              with open(file_path, 'r', encoding='utf-8') as f:
                  content = f.read()

              # Update version strings
              content = re.sub(r'VERSION = "[^"]*"', f'VERSION = "{version}"', content)
              content = re.sub(r'__version__ = "[^"]*"', f'__version__ = "{version}"', content)
              content = re.sub(r'version="[^"]*"', f'version="{version}"', content)

              # Update version date in config.py
              if 'config.py' in file_path:
                  today = datetime.now().strftime('%Y-%m-%d')
                  content = re.sub(r'VERSION_DATE = "[^"]*"', f'VERSION_DATE = "{today}"', content)

              with open(file_path, 'w', encoding='utf-8') as f:
                  f.write(content)

      - name: Build macOS app
        run: python -m PyInstaller --clean p2d.spec

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: p2d-macos
          path: dist/p2d.app

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            p2d-windows/p2d.exe
            p2d-macos/p2d.app/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
